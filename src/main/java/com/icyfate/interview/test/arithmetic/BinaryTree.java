package com.icyfate.interview.test.arithmetic;

/**
 * 二叉树：是n(n>=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成。
 *         个人理解：最多有2个孩子节点（即左子树和右子树）且子树不能相交
 *      节点：树结构的中的基本单位
 *      节点度：节点子树的数量
 *      节点关系：双亲节点、孩子节点、兄弟节点
 *      节点层次：根节点为第一层，依次。。
 *      树的深度、高度
 *
 * 普通二叉树：
 *      1）在二叉树的第i层上最多有2^(i-1)个节点 。（i>=1）              个人理解：按2进制理解，第一层 2^0  第二层 2^1 依次类推
 *      2）二叉树中如果深度为k,那么最多有2^k-1个节点。(k>=1）             个人理解：按2进制理解，下一位刚好是2^k个，然后减一
 *      3）n0=n2+1 n0表示度数为0的节点数，n2表示度数为2的节点数。        个人理解，每多一个n2,就会多2个n0,然后少一个n0，最后结果是不多不少
 *
 * 完全二叉树：具有n个节点的二叉树按层编号，如果任意一点的编号都和满二叉树编号相同，则为完全二叉树（区别是节点有可能只有左子树）
 *      4）在完全二叉树中，具有n个节点的完全二叉树的深度为[log2n]+1，其中[log2n]是向下取整。
 *      5）若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点有如下特性：
 *          (1) 若 i=1，则该结点是二叉树的根，无双亲, 否则，编号为 [i/2] 的结点为其双亲结点;
 *          (2) 若 2i>n，则该结点无左孩子， 否则，编号为 2i 的结点为其左孩子结点；
 *          (3) 若 2i+1>n，则该结点无右孩子结点， 否则，编号为2i+1 的结点为其右孩子结点。
 *
 *      1）叶子结点只能出现在最下层和次下层。
 *      2）最下层的叶子结点集中在树的左部。
 *      3）倒数第二层若存在叶子结点，一定在右部连续位置。
 *      4）如果结点度为1，则该结点只有左孩子，即没有右子树。
 *      5）同样结点数目的二叉树，完全二叉树深度最小。
 *      注：满二叉树一定是完全二叉树，但反过来不一定成立。
 *
 * 满二叉树：所有分支节点(非叶子节点)都存在左子树和右子树，并且所有叶子节点都处在同一层
 *      1）叶子只能出现在最下一层。出现在其它层就不可能达成平衡。
 *      2）非叶子结点的度一定是2。
 *      3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。
 *
 *
 * @author sunbing
 * @version 1.0
 * @since 2021/6/22 15:25
 */
public class BinaryTree {
}
